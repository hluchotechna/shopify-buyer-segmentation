{"logs": [], "results": [{"node": {"raw_sql": "select \nstore,\nstore_name,\naccount,\nplatform,\nmax(time_of_entry) time_of_entry\n\nfrom  ( \n\nSELECT  \nstore,\nbigquery_name store_name,\naccount,\nplatform,\ntime_of_entry,\nfirst_value(time_of_entry) OVER (PARTITION BY store ORDER BY time_of_entry DESC) lv\nFROM `{{ target.project }}.agency_data_pipeline.data_feeds` \nwhere store_name != ''\n\n) \n\nWHERE lv = time_of_entry\ngroup by store, store_name, account, platform", "compiled": true, "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "admin", "stores_proc"], "unique_id": "model.shopify_buyer_segmentation.stores_proc", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "admin/stores_proc.sql", "original_file_path": "models/admin/stores_proc.sql", "name": "stores_proc", "resource_type": "model", "alias": "stores_proc", "checksum": {"name": "sha256", "checksum": "90804ada913375918ff6ae915cc2cff9f8c292f557942ec07aa012a6515a12ff"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/shopify_buyer_segmentation/models/admin/stores_proc.sql", "deferred": false, "compiled_sql": "select \nstore,\nstore_name,\naccount,\nplatform,\nmax(time_of_entry) time_of_entry\n\nfrom  ( \n\nSELECT  \nstore,\nbigquery_name store_name,\naccount,\nplatform,\ntime_of_entry,\nfirst_value(time_of_entry) OVER (PARTITION BY store ORDER BY time_of_entry DESC) lv\nFROM `dbt-projects.agency_data_pipeline.data_feeds` \nwhere store_name != ''\n\n) \n\nWHERE lv = time_of_entry\ngroup by store, store_name, account, platform", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select \nstore,\nstore_name,\naccount,\nplatform,\nmax(time_of_entry) time_of_entry\n\nfrom  ( \n\nSELECT  \nstore,\nbigquery_name store_name,\naccount,\nplatform,\ntime_of_entry,\nfirst_value(time_of_entry) OVER (PARTITION BY store ORDER BY time_of_entry DESC) lv\nFROM `dbt-projects.agency_data_pipeline.data_feeds` \nwhere store_name != ''\n\n) \n\nWHERE lv = time_of_entry\ngroup by store, store_name, account, platform"}, "error": "Database Error in model stores_proc (models/admin/stores_proc.sql)\n  Unrecognized name: store_name at [26:7]\n  compiled SQL at target/run/shopify_buyer_segmentation/models/admin/stores_proc.sql", "status": "ERROR", "execution_time": 1.8811495304107666, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select \nstore,\naccount,\nstore_name,\nsource,\nmedium,\nmax(platform_n) platform,\nmax(channel_n) channel,\ntime_of_entry\nfrom  ( \n\nSELECT  \nstore,\naccount,\nbigquery_name store_name,\nsource,\nmedium,\nplatform as platform_n,\nchannel as channel_n,\ntime_of_entry,\nfirst_value(time_of_entry) OVER (PARTITION BY store ORDER BY time_of_entry DESC) lv\nFROM `{{ target.project }}.agency_data_pipeline.mappings_ga` \n\n) \n\nWHERE lv = time_of_entry\ngroup by store, account, store_name, source, medium, platform_n, channel_n, time_of_entry", "compiled": true, "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "admin", "mappings_ga_proc"], "unique_id": "model.shopify_buyer_segmentation.mappings_ga_proc", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "admin/mappings_ga_proc.sql", "original_file_path": "models/admin/mappings_ga_proc.sql", "name": "mappings_ga_proc", "resource_type": "model", "alias": "mappings_ga_proc", "checksum": {"name": "sha256", "checksum": "db9a1d8296f177c198ed9e94acf7cb4333be4a8a774ce7d13e1ad0688be583e3"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/shopify_buyer_segmentation/models/admin/mappings_ga_proc.sql", "deferred": false, "compiled_sql": "select \nstore,\naccount,\nstore_name,\nsource,\nmedium,\nmax(platform_n) platform,\nmax(channel_n) channel,\ntime_of_entry\nfrom  ( \n\nSELECT  \nstore,\naccount,\nbigquery_name store_name,\nsource,\nmedium,\nplatform as platform_n,\nchannel as channel_n,\ntime_of_entry,\nfirst_value(time_of_entry) OVER (PARTITION BY store ORDER BY time_of_entry DESC) lv\nFROM `dbt-projects.agency_data_pipeline.mappings_ga` \n\n) \n\nWHERE lv = time_of_entry\ngroup by store, account, store_name, source, medium, platform_n, channel_n, time_of_entry", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select \nstore,\naccount,\nstore_name,\nsource,\nmedium,\nmax(platform_n) platform,\nmax(channel_n) channel,\ntime_of_entry\nfrom  ( \n\nSELECT  \nstore,\naccount,\nbigquery_name store_name,\nsource,\nmedium,\nplatform as platform_n,\nchannel as channel_n,\ntime_of_entry,\nfirst_value(time_of_entry) OVER (PARTITION BY store ORDER BY time_of_entry DESC) lv\nFROM `dbt-projects.agency_data_pipeline.mappings_ga` \n\n) \n\nWHERE lv = time_of_entry\ngroup by store, account, store_name, source, medium, platform_n, channel_n, time_of_entry"}, "error": null, "status": "CREATE TABLE (10.0 rows, 910.0 Bytes processed)", "execution_time": 1.8396055698394775, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-11-10T09:24:11.370588Z", "completed_at": "2020-11-10T09:24:11.390396Z"}, {"name": "execute", "started_at": "2020-11-10T09:24:11.390670Z", "completed_at": "2020-11-10T09:24:13.209368Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\ndate_in_range,\ndate_in_range_bom,\ndate_in_range_bom_mom,\nunix_date_in_range,\nunix_date_in_range_bom,\nunix_date(date_in_range_bom_mom) unix_date_in_range_bom_mom,\nyyyymm,\ndate_in_range_yoy,\nunix_date(date_in_range_yoy) unix_date_in_range_yoy\n\nFROM\n(\n\tSELECT \n\tdate_in_range,\n\tdate_in_range_bom,\n\tdate_sub(date_in_range_bom, INTERVAL 1 MONTH) date_in_range_bom_mom,\n\tdate_sub(date_in_range, INTERVAL 1 YEAR) date_in_range_yoy,\n\tunix_date_in_range,\n\tunix_date(date_in_range_bom) unix_date_in_range_bom,\n\tyyyymm,\n\tfirst_value(date_in_range) over (partition by yyyymm order by date_in_range desc) monthend_date_in_range\n\tFROM\n\t( \n\t\tSELECT \n\t\tdate_in_range,\n\t\tdate_trunc( date_in_range, MONTH) date_in_range_bom,\n\t\tunix_date(date_in_range) unix_date_in_range,\n\t\tformat_date(\"%Y-%m\", date_in_range) AS yyyymm\n\t\tFROM UNNEST(\n\t\t    GENERATE_DATE_ARRAY(DATE('2016-01-31'), CURRENT_DATE(), INTERVAL 1 DAY)\n\t\t) AS date_in_range\n\t)\n)\nwhere date_in_range = monthend_date_in_range", "compiled": true, "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "admin", "monthend_dates"], "unique_id": "model.shopify_buyer_segmentation.monthend_dates", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "admin/monthend_dates.sql", "original_file_path": "models/admin/monthend_dates.sql", "name": "monthend_dates", "resource_type": "model", "alias": "monthend_dates", "checksum": {"name": "sha256", "checksum": "1b3c3c11839e35ac7bdd5e8844116ac24ac33ecd54b59d942b22214415b29b02"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/shopify_buyer_segmentation/models/admin/monthend_dates.sql", "deferred": false, "compiled_sql": "SELECT\ndate_in_range,\ndate_in_range_bom,\ndate_in_range_bom_mom,\nunix_date_in_range,\nunix_date_in_range_bom,\nunix_date(date_in_range_bom_mom) unix_date_in_range_bom_mom,\nyyyymm,\ndate_in_range_yoy,\nunix_date(date_in_range_yoy) unix_date_in_range_yoy\n\nFROM\n(\n\tSELECT \n\tdate_in_range,\n\tdate_in_range_bom,\n\tdate_sub(date_in_range_bom, INTERVAL 1 MONTH) date_in_range_bom_mom,\n\tdate_sub(date_in_range, INTERVAL 1 YEAR) date_in_range_yoy,\n\tunix_date_in_range,\n\tunix_date(date_in_range_bom) unix_date_in_range_bom,\n\tyyyymm,\n\tfirst_value(date_in_range) over (partition by yyyymm order by date_in_range desc) monthend_date_in_range\n\tFROM\n\t( \n\t\tSELECT \n\t\tdate_in_range,\n\t\tdate_trunc( date_in_range, MONTH) date_in_range_bom,\n\t\tunix_date(date_in_range) unix_date_in_range,\n\t\tformat_date(\"%Y-%m\", date_in_range) AS yyyymm\n\t\tFROM UNNEST(\n\t\t    GENERATE_DATE_ARRAY(DATE('2016-01-31'), CURRENT_DATE(), INTERVAL 1 DAY)\n\t\t) AS date_in_range\n\t)\n)\nwhere date_in_range = monthend_date_in_range", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\ndate_in_range,\ndate_in_range_bom,\ndate_in_range_bom_mom,\nunix_date_in_range,\nunix_date_in_range_bom,\nunix_date(date_in_range_bom_mom) unix_date_in_range_bom_mom,\nyyyymm,\ndate_in_range_yoy,\nunix_date(date_in_range_yoy) unix_date_in_range_yoy\n\nFROM\n(\n\tSELECT \n\tdate_in_range,\n\tdate_in_range_bom,\n\tdate_sub(date_in_range_bom, INTERVAL 1 MONTH) date_in_range_bom_mom,\n\tdate_sub(date_in_range, INTERVAL 1 YEAR) date_in_range_yoy,\n\tunix_date_in_range,\n\tunix_date(date_in_range_bom) unix_date_in_range_bom,\n\tyyyymm,\n\tfirst_value(date_in_range) over (partition by yyyymm order by date_in_range desc) monthend_date_in_range\n\tFROM\n\t( \n\t\tSELECT \n\t\tdate_in_range,\n\t\tdate_trunc( date_in_range, MONTH) date_in_range_bom,\n\t\tunix_date(date_in_range) unix_date_in_range,\n\t\tformat_date(\"%Y-%m\", date_in_range) AS yyyymm\n\t\tFROM UNNEST(\n\t\t    GENERATE_DATE_ARRAY(DATE('2016-01-31'), CURRENT_DATE(), INTERVAL 1 DAY)\n\t\t) AS date_in_range\n\t)\n)\nwhere date_in_range = monthend_date_in_range"}, "error": null, "status": "CREATE TABLE (59.0 rows, 0.0 Bytes processed)", "execution_time": 2.015822649002075, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-11-10T09:24:13.212748Z", "completed_at": "2020-11-10T09:24:13.230997Z"}, {"name": "execute", "started_at": "2020-11-10T09:24:13.231268Z", "completed_at": "2020-11-10T09:24:15.227819Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set stores = get_column_values(table=ref('stores_proc'), column='store_name', max_records=50, filter_column='platform', filter_value='Shopify') %}\n\n{% if stores != [] %}\n\nwith refunds as (\n\n\t{% for store in stores %}\n\tSELECT\n\t'{{store}}' store_name,\n\t_id order_number,\n\tcheckout_id,\n\tfinancial_status,\n\tline_item_id,\n\tquantity,\n\tsubtotal,\n\tline_item.variant_id variant_id,\n\tline_item.id refund_id,\n \t_sdc_sequence\n\tFROM `{{ target.project }}.shopify_{{store}}.orders` \n\tcross join unnest(refunds), unnest(refund_line_items)\n  \twhere financial_status like '%refund%'\n\t{% if not loop.last %} UNION ALL {% endif %}\n\t{% endfor %}\n\n)\n\nSELECT * \nFROM \n\t(\n    SELECT\n    store_name,\n\torder_number,\n\tcheckout_id,\n\tfinancial_status,\n\tline_item_id,\n\tquantity,\n\tsubtotal refund_amount,\n\tvariant_id,\n\trefund_id,\n \t_sdc_sequence,\n    first_value(_sdc_sequence) OVER (PARTITION BY order_number, line_item_id ORDER BY _sdc_sequence DESC) lv\n    FROM refunds\n   \t) \nWHERE lv = _sdc_sequence\n\n{% endif %}", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "base", "shopify", "shopify_refunds_proc"], "unique_id": "model.shopify_buyer_segmentation.shopify_refunds_proc", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "base/shopify/shopify_refunds_proc.sql", "original_file_path": "models/base/shopify/shopify_refunds_proc.sql", "name": "shopify_refunds_proc", "resource_type": "model", "alias": "shopify_refunds_proc", "checksum": {"name": "sha256", "checksum": "ca429391c0d4c7aadd944f4141e20f3347203d42d5e395c5d8153d39c16d39a5"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stores_proc"]], "sources": [], "depends_on": {"macros": ["macro.shopify_buyer_segmentation.get_column_values"], "nodes": ["model.shopify_buyer_segmentation.stores_proc"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{% set stores = get_column_values(table=ref('stores_proc'), column='store_name', max_records=50, filter_column='platform', filter_value='Shopify') %}\n\n{% if stores != [] %}\n\nwith orders as (\n\n\t{% for store in stores %}\n\t\tSELECT\n\t\t'{{store}}' store_name,\n\t\tcreated_at,\n\t\t_id order_number,\n\t\tcode discount_code,\n\t\ttype discount_type,\n\t\t_sdc_sequence,\n\t\tfirst_value(_sdc_sequence) OVER (PARTITION BY order_number, _id ORDER BY _sdc_sequence DESC) lv\n\t\tFROM `{{ target.project }}.shopify_{{store}}.orders` \n\t\tcross join unnest(discount_codes)\n\t\n\t{% if not loop.last %} UNION ALL {% endif %}\n\t{% endfor %}\n\n)\n\nSELECT\nstore_name,\norder_number,\ndiscount_code,\ndiscount_type\nFROM orders\nwhere lv = _sdc_sequence\n\n{% endif %}", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "base", "shopify", "shopify_discounts_proc"], "unique_id": "model.shopify_buyer_segmentation.shopify_discounts_proc", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "base/shopify/shopify_discounts_proc.sql", "original_file_path": "models/base/shopify/shopify_discounts_proc.sql", "name": "shopify_discounts_proc", "resource_type": "model", "alias": "shopify_discounts_proc", "checksum": {"name": "sha256", "checksum": "f8290032e5f106f7536602101bb6f10d4b6149231a277ac84501c50ee4a76203"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stores_proc"]], "sources": [], "depends_on": {"macros": ["macro.shopify_buyer_segmentation.get_column_values"], "nodes": ["model.shopify_buyer_segmentation.stores_proc"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "-- depends_on: {{ ref('stores_proc') }}\n\n{% set stores = get_column_values(table=ref('stores_proc'), column='store_name', max_records=50, filter_column='platform', filter_value='Shopify') %}\n\n{% if stores != [] %}\n\nwith customers as (\n\n\t{% for store in stores %}\n\tSELECT\n\t'{{store}}' store_name,\n\t'Shopify' as lookup_platform,\n\tcreated_at,\n\tid,\n\tfirst_name,\n\tlast_name,\n\temail,\n\t_sdc_sequence,\n\tfirst_value(_sdc_sequence) over (partition by id order by _sdc_sequence desc) lv\n\tFROM `{{ target.project }}.shopify_{{store}}.customers` \n\t{% if not loop.last %} UNION ALL {% endif %}\n\t{% endfor %}\n\n)\n\nSELECT\nb.account,\nb.store,\nb.platform,\ncreated_at,\nid,\nfirst_name,\nlast_name,\nemail\nFROM customers a\nLEFT JOIN {{ref('stores_proc')}} b \nON ( a.store_name = b.store_name\n  AND a.lookup_platform = b.platform )\nwhere a.lv = a._sdc_sequence\n\n{% endif %}", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "base", "shopify", "shopify_customers_proc"], "unique_id": "model.shopify_buyer_segmentation.shopify_customers_proc", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "base/shopify/shopify_customers_proc.sql", "original_file_path": "models/base/shopify/shopify_customers_proc.sql", "name": "shopify_customers_proc", "resource_type": "model", "alias": "shopify_customers_proc", "checksum": {"name": "sha256", "checksum": "1890c5cab5c710d285b657dccc4e76f0561c5d03a5768be0cb206f813fd4ec77"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stores_proc"], ["stores_proc"]], "sources": [], "depends_on": {"macros": ["macro.shopify_buyer_segmentation.get_column_values"], "nodes": ["model.shopify_buyer_segmentation.stores_proc", "model.shopify_buyer_segmentation.stores_proc"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "-- depends_on: {{ ref('stores_proc') }},{{ ref('mappings_ga_proc') }}\n{% set stores = get_column_values(table=ref('stores_proc'), column='store_name', max_records=50, filter_column='platform', filter_value='Google Analytics') %}\n\n{% if stores != '' %}\n\nwith ga_report as (\n\n\t    {% for store in stores %}\n\t    \t\n\t\t   \tSELECT\n\t\t   \t'{{store}}' as store_name,\n\t\t   \t'Google Analytics' as lookup_platform,\n\t\t\tlower(trim(regexp_replace(replace(replace(replace(replace(CONCAT(hostname,landingpagepath),'www.',''),'http://',''),'https://',''),'.html',''),r'\\?.*$',''),'/')) as url,\n\t\t\tcast(date as date) date,\n\t\t\tlower(source) source,\n\t\t\tlower(medium) medium,\n\t\t\tlower(replace(replace(replace(campaign,' ', ''),'-',''),'_','')) campaign,\n\t\t\tcast(regexp_replace(transactionid, r'#|B', '') as int64) transactionid,\n\t\t\t_sdc_sequence,\n\t\t\tfirst_value(_sdc_sequence) OVER (PARTITION BY hostname, landingpagepath, date, source, medium, transactionid ORDER BY _sdc_sequence DESC) lv\n\t\t\tFROM `{{ target.project }}.ga_{{store}}.report` \n\n\t\t    {% if not loop.last %} UNION ALL {% endif %}\n\t   {% endfor %}\n\n)\n\n\nSELECT  \ndate,\nb.store store,\nc.source source,\nc.medium medium,\na.campaign campaign,\nconcat(a.source, ' / ', a.medium) source_medium,  \ncase when c.platform is null then \"Unmapped\" else c.platform end as platform,\ncase when c.channel is null then \"Unmapped\" else c.channel end as channel,\nurl,\ntransactionid\nFROM (\n\n\tSELECT \n\tstore_name,\n\tlookup_platform,\n\tdate,\n\ttransactionid,\n\tmax(url) url,\n\tmax(source) source,\n\tmax(medium) medium,\n\tmax(campaign) campaign\n\tFROM ga_report\n\twhere lv = _sdc_sequence\n\tgroup by store_name, lookup_platform, date, transactionid\n\n) a\nLEFT JOIN {{ref('stores_proc')}} b \nON ( a.store_name = b.store_name \n\tAND a.lookup_platform = b.platform )\nLEFT JOIN {{ref('mappings_ga_proc')}} c\nON ( a.source = c.source\n  AND a.medium = c.medium \n  AND a.store_name = c.store_name )\n\n{% endif %}", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "base", "ga", "ga_transactions"], "unique_id": "model.shopify_buyer_segmentation.ga_transactions", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "base/ga/ga_transactions.sql", "original_file_path": "models/base/ga/ga_transactions.sql", "name": "ga_transactions", "resource_type": "model", "alias": "ga_transactions", "checksum": {"name": "sha256", "checksum": "376c034aa1becbf96f6a0320135754e3e87a0132298b59b36a5f6c89acb12b7d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stores_proc"], ["mappings_ga_proc"], ["stores_proc"], ["stores_proc"], ["mappings_ga_proc"]], "sources": [], "depends_on": {"macros": ["macro.shopify_buyer_segmentation.get_column_values"], "nodes": ["model.shopify_buyer_segmentation.stores_proc", "model.shopify_buyer_segmentation.mappings_ga_proc", "model.shopify_buyer_segmentation.stores_proc", "model.shopify_buyer_segmentation.stores_proc", "model.shopify_buyer_segmentation.mappings_ga_proc"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "-- depends_on: {{ ref('stores_proc') }}, {{ ref('shopify_refunds_proc')}}, {{ ref('shopify_discounts_proc')}}\n\n{% set stores = get_column_values(table=ref('stores_proc'), column='store_name', max_records=50, filter_column='platform', filter_value='Shopify') %}\n\n{% if stores != [] %}\n\nwith orders as (\n\n\t{% for store in stores %}\n\tSELECT \n\tstore_name,\n\tlookup_platform,\n\tcreated_at,\n\torder_number,\n\ttotal_order_price_undiscounted,\n\ttotal_discounts,\n\tdiscount_pct * price * quantity as discount,\n\ttotal_order_shipping_price,\n\ttotal_order_price_incl_shipping,\n\tcheckout_id,\n\tlanding_site,\n\tid line_item_id,    \n\tcustomer_id,    \n\tquantity,\n\tcase when discount_pct > 0 then (price * quantity) * (1 - discount_pct) \n\t  else price * quantity end as price,\n\tproduct_id, \n\tsku, \n\tvariant_title, \n\tvariant_id,\n\t_sdc_sequence,\n\tlv\n\tFROM (\n\n\t\tSELECT\n\t\t'{{store}}' store_name,\n\t\t'Shopify' as lookup_platform,\n    \tcreated_at,\n\t\t_id order_number,\n    \ttotal_line_items_price total_order_price_undiscounted,\n    \ttotal_discounts,\n\t    case when total_line_items_price > 0 then total_discounts / total_line_items_price \n\t\t\telse null end as discount_pct,        \t\n\t\tcast(discounted_price as float64) total_order_shipping_price,\n\t\ttotal_price_usd total_order_price_incl_shipping,\n    \tcheckout_id,\n    \tlanding_site,    \n\t\tcustomer.id customer_id,    \n    \tline_items,\n    \tfinancial_status,\n\t\t_sdc_sequence,\n\t\tfirst_value(_sdc_sequence) OVER (PARTITION BY order_number, _id ORDER BY _sdc_sequence DESC) lv\n\t\tFROM `{{ target.project }}.shopify_{{store}}.orders` \n\t\tcross join unnest(shipping_lines)\n\t\twhere financial_status in ('paid', 'partially_refunded', 'refunded')\n\t)\n\tcross join unnest(line_items)\n\twhere lv = _sdc_sequence\n\t\n\t{% if not loop.last %} UNION ALL {% endif %}\n\t{% endfor %}\n\n)\n\nSELECT\nb.account,\nb.store,\nb.platform,\ncreated_at,\na.order_number,\na.quantity,\nc.quantity refund_quantity,\ncase when c.quantity is not null then a.quantity - c.quantity else a.quantity end as final_quantity,\nprice, \ntotal_order_price_undiscounted,\ntotal_discounts,\ntrim(lower(d.discount_code)) discount_code,\ndiscount,\nd.discount_type,\ntotal_order_shipping_price,\ntotal_order_price_incl_shipping,\nrefund_amount,\ncase when refund_amount is not null then price - refund_amount else price end as final_price,\na.checkout_id,\na.product_id, \nlanding_site,\nsku, \nvariant_title, \na.variant_id,\na.line_item_id,\t\ncustomer_id\nFROM orders a\nLEFT JOIN {{ref('stores_proc')}} b \nON ( a.store_name = b.store_name\n  AND a.lookup_platform = b.platform )\nLEFT JOIN {{ref('shopify_refunds_proc')}} c\nON ( a.order_number = c.order_number\n\tAND a.line_item_id = c.line_item_id\n\tAND a.store_name = c.store_name )\nLEFT JOIN {{ref('shopify_discounts_proc')}} d\nON ( a.order_number = d.order_number \n    AND a.store_name = d.store_name )  \t\n\n{% endif %}", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "base", "shopify", "shopify_orders_proc"], "unique_id": "model.shopify_buyer_segmentation.shopify_orders_proc", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "base/shopify/shopify_orders_proc.sql", "original_file_path": "models/base/shopify/shopify_orders_proc.sql", "name": "shopify_orders_proc", "resource_type": "model", "alias": "shopify_orders_proc", "checksum": {"name": "sha256", "checksum": "d417e2dbd3c6af907fc849e41927dc0e781a449550e3f3fc64451862036fc8d3"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stores_proc"], ["shopify_refunds_proc"], ["shopify_discounts_proc"], ["stores_proc"]], "sources": [], "depends_on": {"macros": ["macro.shopify_buyer_segmentation.get_column_values"], "nodes": ["model.shopify_buyer_segmentation.stores_proc", "model.shopify_buyer_segmentation.shopify_refunds_proc", "model.shopify_buyer_segmentation.shopify_discounts_proc", "model.shopify_buyer_segmentation.stores_proc"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "SELECT \naccount,\nstore,\nid,\ncreated_at,\nfirst_name,\nlast_name,\nemail,\nsplit(email,'@')[SAFE_ORDINAL(2)] email_domain\nFROM\n{{ ref('shopify_customers_proc') }}", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "join", "agg_customers"], "unique_id": "model.shopify_buyer_segmentation.agg_customers", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "join/agg_customers.sql", "original_file_path": "models/join/agg_customers.sql", "name": "agg_customers", "resource_type": "model", "alias": "agg_customers", "checksum": {"name": "sha256", "checksum": "c17b6f07513ae3d399f00a2d88db8cb10e55ff19186cff817029ca3e045b7c0f"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["shopify_customers_proc"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.shopify_buyer_segmentation.shopify_customers_proc"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "-- depends_on: {{ ref('stores_proc') }}, {{ ref('shopify_refunds_proc')}}\n\n{% set stores = get_column_values(table=ref('stores_proc'), column='store_name', max_records=50, filter_column='platform', filter_value='Shopify') %}\n\n{% if stores != [] %}\n\nwith products as (\n\n\t{% for store in stores %}\n\tSELECT\n\t'{{store}}' store_name,\n\t'Shopify' as lookup_platform,\n\tproduct_name,\n\tlower(product_type) product_type,\n\tproduct_id,\n\tsku,\n\tid variant_id,\n\tcast(created_at as date) created_at,\n\t_sdc_sequence,\n\tfirst_value(_sdc_sequence) OVER (PARTITION BY product_id ORDER BY _sdc_sequence DESC) lv\n\tFROM (\n\t\tSELECT\n\t\tvariants,\n\t\tproduct_type,\n\t\ttitle product_name,\n\t\t_sdc_sequence\n\t\tFROM `{{ target.project }}.shopify_{{store}}.products` \n\t\t)\n\tcross join unnest(variants)\n\t{% if not loop.last %} UNION ALL {% endif %}\n\t{% endfor %}\n\n)\n\nSELECT\nb.account,\nb.store,\nb.platform,\nmax(product_type) product_type,\nproduct_id,\nvariant_id,\nsku,\ncreated_at,\nproduct_name\nFROM products a\nLEFT JOIN {{ref('stores_proc')}} b \nON ( a.store_name = b.store_name\n  AND a.lookup_platform = b.platform )\nwhere a.lv = a._sdc_sequence\ngroup by product_id, account, store, platform, sku, variant_id, created_at, product_name\n\n{% endif %}", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "base", "shopify", "shopify_products_proc"], "unique_id": "model.shopify_buyer_segmentation.shopify_products_proc", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "base/shopify/shopify_products_proc.sql", "original_file_path": "models/base/shopify/shopify_products_proc.sql", "name": "shopify_products_proc", "resource_type": "model", "alias": "shopify_products_proc", "checksum": {"name": "sha256", "checksum": "ccefe7d92dfc65882856c650293dbb412281958b00bdd4be5c88232ed9b352a8"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stores_proc"], ["shopify_refunds_proc"], ["stores_proc"]], "sources": [], "depends_on": {"macros": ["macro.shopify_buyer_segmentation.get_column_values"], "nodes": ["model.shopify_buyer_segmentation.stores_proc", "model.shopify_buyer_segmentation.shopify_refunds_proc", "model.shopify_buyer_segmentation.stores_proc"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "SELECT\nstore,\ncast(created_at as date) order_date,\norder_number,\ncustomer_id,\nsum(quantity) quantity,\nsum(revenue) revenue,\nmax(total_order_shipping_price) shipping_price\nFROM\n{{ ref('shopify_orders_proc') }}\nGROUP BY store, order_date, order_number, customer_id", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "join", "transaction_by_order_number"], "unique_id": "model.shopify_buyer_segmentation.transaction_by_order_number", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "join/transaction_by_order_number.sql", "original_file_path": "models/join/transaction_by_order_number.sql", "name": "transaction_by_order_number", "resource_type": "model", "alias": "transaction_by_order_number", "checksum": {"name": "sha256", "checksum": "63e349de4e8d4b30c6aaff193d1f1efd799e81a1d4f3ba5d246d88ab2bc5771e"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["shopify_orders_proc"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.shopify_buyer_segmentation.shopify_orders_proc"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "SELECT\nstore,\ncustomer_id,\norder_number,\norder_date,\nrecent_order_date,\nfirst_order_date,\ncase when first_order_number = order_number then 'New'\n\twhen date_diff(order_date, recent_order_date, DAY) <= 365 then 'Repeat'\n\twhen date_diff(order_date, recent_order_date, DAY) > 365 then 'Reactivated'\n else '' end as order_type,\nquantity,\nrevenue,\n1 as orders,\nfirst_order_revenue,\nlifetime_revenue\nFROM\n\n(\n\n\tSELECT\n\tstore,\n\tcustomer_id,\n\torder_number,\n\torder_date,\n\tquantity,\n\trevenue,\n\tlag(order_date) over w1 recent_order_date,\n\tfirst_value(order_date) over w1 first_order_date,\n\tfirst_value(order_number) over w1 first_order_number,\n\tfirst_value(revenue) over w1 first_order_revenue,\n\tsum(revenue) over w2 lifetime_revenue\n\tFROM {{ ref('transaction_by_order_number') }}\n\tWINDOW w1 as (PARTITION BY store, customer_id ORDER BY order_date asc),\n\tw2 as (PARTITION BY store, customer_id)\n)", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "join", "customers_by_transaction"], "unique_id": "model.shopify_buyer_segmentation.customers_by_transaction", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "join/customers_by_transaction.sql", "original_file_path": "models/join/customers_by_transaction.sql", "name": "customers_by_transaction", "resource_type": "model", "alias": "customers_by_transaction", "checksum": {"name": "sha256", "checksum": "0c8771fb39b56ad1cb1be60751d0f9b45f32424d3b69a9584cba34057710f9a9"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["transaction_by_order_number"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.shopify_buyer_segmentation.transaction_by_order_number"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with ga_transaction as (\n\n\tSELECT\n\tdate, \n\tstore,\n\ttransactionid,\n\tchannel,\n\tplatform,\n\turl,\n\tcampaign\n\tFROM {{ ref('ga_transactions')}}\n),\n\ncustomers_by_transaction as (\n\t\n\tSELECT\n\tstore,\n\tcustomer_id,\n\torder_number,\n\torder_date,\n\tfirst_order_date,\n\trecent_order_date,\n\torder_type,\n\tquantity,\n\trevenue,\n\torders,\n\tfirst_order_revenue,\n\tlifetime_revenue\n\tFROM {{ ref('customers_by_transaction')}}\n)\n\nSELECT\nstore,\ncustomer_id,\norder_number,\ntransactionid,\norder_date,\nfirst_order_date,\nformat_date(\"%Y-%m\", first_order_date) AS first_order_month,\norder_type,\nfirst_order_revenue,\nlifetime_revenue,\nfirst_value(channel) over w1 as first_order_channel,\nfirst_value(platform) over w1 as first_order_platform,\nchannel,\nplatform,\nurl,\ncampaign,\nquantity,\nrevenue,\norders\nFROM (\n\n\tSELECT\n\ta.store,\n\ta.customer_id,\n\ta.order_number,\n\tb.transactionid,\n\ta.order_date, \n\ta.first_order_date, \n\ta.order_type,\n\ta.first_order_revenue,\n\ta.lifetime_revenue,\n\tb.channel,\n\tb.platform,\n\tb.url,\n\tb.campaign,\n\ta.quantity,\n\ta.revenue,\n\ta.orders\n\tFROM customers_by_transaction a\n\tLEFT JOIN ga_transaction b\n\tON (\n\t    a.store = b.store AND\n\t    a.order_number = b.transactionid\n\t)\t\n)\nWINDOW w1 as (PARTITION BY store, customer_id ORDER BY order_date asc)", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "join", "agg_transactions"], "unique_id": "model.shopify_buyer_segmentation.agg_transactions", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "join/agg_transactions.sql", "original_file_path": "models/join/agg_transactions.sql", "name": "agg_transactions", "resource_type": "model", "alias": "agg_transactions", "checksum": {"name": "sha256", "checksum": "fb6296b449d8dbdca69d461605edf1e9c77abd1b4cbfa2c3c7d8af868c1c073d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["ga_transactions"], ["customers_by_transaction"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.shopify_buyer_segmentation.ga_transactions", "model.shopify_buyer_segmentation.customers_by_transaction"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "WITH customers AS (\n\n  SELECT \n  store,\n  customer_id,\n  order_date,\n  unix_date(order_date) unix_order_date, \n  first_order_date,\n  unix_date(first_order_date) first_order_unix_date,\n  first_order_revenue,\n  first_order_channel,\n  first_order_platform,\n  channel,\n  platform,\n  url,\n  campaign,\n  quantity,\n  revenue,\n  orders\n  FROM {{ref('agg_transactions')}}\n),\n\ndaterange AS (\n  SELECT * FROM {{ref('monthend_dates')}}    \n)\n\nSELECT\nstore,\nperiod,\ncustomer_id,\ndate,\nwindow_end_unix_date,\nwindow_start_unix_date,\nfirst_order_unix_date,\nfirst_order_channel,\nfirst_order_platform,\nrecency_days,\nfrequency,\nquantity,\nrevenue, \nPERCENTILE_CONT(revenue, 0.90) OVER w1 AS revenue_90pct,\nPERCENTILE_CONT(revenue, 0.10) OVER w1 AS revenue_10pct\nFROM (\n   \n  SELECT \n  store,\n  period,\n  customer_id,\n  date,\n  window_end_unix_date,\n  window_start_unix_date,\n  first_order_unix_date,\n  window_end_unix_date - unix_date(recent_order) recency_days,\n  first_order_channel,\n  first_order_platform,\n  quantity,\n  revenue, \n  frequency\n  FROM \n  (  \n\n    SELECT \n    store,\n    'Rolling Quarter' as period,\n    customer_id,\n    date_in_range date,\n    unix_date_in_range, \n    unix_date_in_range window_end_unix_date, \n    unix_date_in_range - 90 window_start_unix_date, \n    first_order_unix_date,\n    first_order_channel,\n    first_order_platform,\n    max(order_date) recent_order,\n    sum(quantity) as quantity,\n    sum(revenue) as revenue,\n    sum(orders) as frequency\n    FROM daterange\n    JOIN customers\n    ON customers.unix_order_date > ( daterange.unix_date_in_range - 90 )\n    AND customers.unix_order_date <= daterange.unix_date_in_range\n    GROUP BY store, customer_id, date, unix_date_in_range, window_end_unix_date, \n    window_start_unix_date, first_order_unix_date, first_order_channel, first_order_platform\n\n    UNION ALL\n\n    SELECT \n    store,\n    'Rolling Previous Quarter' as period,\n    customer_id,\n    date_in_range date,\n    unix_date_in_range, \n    unix_date_in_range - 90 window_end_unix_date, \n    unix_date_in_range - 180 window_start_unix_date, \n    first_order_unix_date,\n    first_order_channel,\n    first_order_platform,\n    max(order_date) recent_order,\n    sum(quantity) as quantity,\n    sum(revenue) as revenue,\n    sum(orders) as frequency\n    FROM daterange\n    JOIN customers\n    ON customers.unix_order_date > ( daterange.unix_date_in_range - 180 )\n    AND customers.unix_order_date <= ( daterange.unix_date_in_range - 90 )\n    GROUP BY store, customer_id, date, unix_date_in_range, window_end_unix_date, \n    window_start_unix_date, first_order_unix_date, first_order_channel, first_order_platform\n\n  )\n)\nWINDOW w1 as (PARTITION BY store, period, date)", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "math", "buyer-segmentation", "customers_proc_qoq"], "unique_id": "model.shopify_buyer_segmentation.customers_proc_qoq", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "math/buyer-segmentation/customers_proc_qoq.sql", "original_file_path": "models/math/buyer-segmentation/customers_proc_qoq.sql", "name": "customers_proc_qoq", "resource_type": "model", "alias": "customers_proc_qoq", "checksum": {"name": "sha256", "checksum": "ce9336d5d407fe45eaad6f0cca60a51ecbad1479c35c982991dd22ac462517fa"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["agg_transactions"], ["monthend_dates"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.shopify_buyer_segmentation.agg_transactions", "model.shopify_buyer_segmentation.monthend_dates"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "WITH customers AS (\n\n  SELECT \n  store,\n  customer_id,\n  order_date,\n  unix_date(order_date) unix_order_date, \n  first_order_date,\n  unix_date(first_order_date) first_order_unix_date,\n  first_order_revenue,\n  first_order_channel,\n  first_order_platform,\n  channel,\n  platform,\n  url,\n  campaign,\n  quantity,\n  revenue,\n  orders\n  FROM {{ref('agg_transactions')}}\n),\n\ndaterange AS (\n  SELECT * FROM {{ref('monthend_dates')}}    \n)\n\nSELECT\nstore,\nperiod,\ncustomer_id,\ndate,\nwindow_end_unix_date,\nwindow_start_unix_date,\nfirst_order_unix_date,\nfirst_order_channel,\nfirst_order_platform,\nrecency_days,\nfrequency,\nquantity,\nrevenue, \nPERCENTILE_CONT(revenue, 0.90) OVER w1 AS revenue_90pct,\nPERCENTILE_CONT(revenue, 0.10) OVER w1 AS revenue_10pct\nFROM (\n   \n  SELECT \n  store,\n  period,\n  customer_id,\n  date,\n  window_end_unix_date,\n  window_start_unix_date,\n  first_order_unix_date,\n  window_end_unix_date - unix_date(recent_order) recency_days,\n  first_order_channel,\n  first_order_platform,\n  quantity,\n  revenue, \n  frequency\n  FROM \n  (  \n\n    SELECT \n    store,\n    'Rolling Year' as period,\n    customer_id,\n    date_in_range date,\n    unix_date_in_range, \n    unix_date_in_range window_end_unix_date, \n    unix_date_in_range - 365 window_start_unix_date, \n    first_order_unix_date,\n    first_order_channel,\n    first_order_platform,\n    max(order_date) recent_order,\n    sum(quantity) as quantity,\n    sum(revenue) as revenue,\n    sum(orders) as frequency\n    FROM daterange\n    JOIN customers\n    ON customers.unix_order_date > ( daterange.unix_date_in_range - 365 )\n    AND customers.unix_order_date <= daterange.unix_date_in_range\n    GROUP BY store, customer_id, date, unix_date_in_range, window_end_unix_date, \n    window_start_unix_date, first_order_unix_date, first_order_channel, first_order_platform\n\n    UNION ALL\n\n    SELECT \n    store,\n    'Rolling Previous Year' as period,\n    customer_id,\n    date_in_range date,\n    unix_date_in_range, \n    unix_date_in_range - 365 window_end_unix_date, \n    unix_date_in_range - 730 window_start_unix_date, \n    first_order_unix_date,\n    first_order_channel,\n    first_order_platform,\n    max(order_date) recent_order,\n    sum(quantity) as quantity,\n    sum(revenue) as revenue,\n    sum(orders) as frequency\n    FROM daterange\n    JOIN customers\n    ON customers.unix_order_date > ( daterange.unix_date_in_range - 730 )\n    AND customers.unix_order_date <= ( daterange.unix_date_in_range - 365 )\n    GROUP BY store, customer_id, date, unix_date_in_range, window_end_unix_date, \n    window_start_unix_date, first_order_unix_date, first_order_channel, first_order_platform\n\n  )\n)\nWINDOW w1 as (PARTITION BY store, period, date)", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "math", "buyer-segmentation", "customers_proc_yoy"], "unique_id": "model.shopify_buyer_segmentation.customers_proc_yoy", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "math/buyer-segmentation/customers_proc_yoy.sql", "original_file_path": "models/math/buyer-segmentation/customers_proc_yoy.sql", "name": "customers_proc_yoy", "resource_type": "model", "alias": "customers_proc_yoy", "checksum": {"name": "sha256", "checksum": "7de40be14f3e29b95952e9792086b964198cfdb82930c9c83a838622e724a934"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["agg_transactions"], ["monthend_dates"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.shopify_buyer_segmentation.agg_transactions", "model.shopify_buyer_segmentation.monthend_dates"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "SELECT \nstore,\nperiod,\ncustomer_id,\ndate,\nwindow_end_unix_date,\nwindow_start_unix_date,\nfirst_order_unix_date,\nfirst_order_channel,\nfirst_order_platform,\nrecency_days,\nfrequency,\nquantity,\nrevenue, \nrevenue_90pct,\nrevenue_10pct\nFROM \n{{ ref('customers_proc_qoq')}}\n\nUNION ALL\n\nSELECT \nstore,\nperiod,\ncustomer_id,\ndate,\nwindow_end_unix_date,\nwindow_start_unix_date,\nfirst_order_unix_date,\nfirst_order_channel,\nfirst_order_platform,\nrecency_days,\nfrequency,\nquantity,\nrevenue, \nrevenue_90pct,\nrevenue_10pct\nFROM \n{{ ref('customers_proc_yoy')}}", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "math", "buyer-segmentation", "customers_proc"], "unique_id": "model.shopify_buyer_segmentation.customers_proc", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "math/buyer-segmentation/customers_proc.sql", "original_file_path": "models/math/buyer-segmentation/customers_proc.sql", "name": "customers_proc", "resource_type": "model", "alias": "customers_proc", "checksum": {"name": "sha256", "checksum": "857aac3e4fddfdf67b1888fca3c3c0dc1a5799e80ff69c301d6f972b2987d3fa"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["customers_proc_qoq"], ["customers_proc_yoy"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.shopify_buyer_segmentation.customers_proc_qoq", "model.shopify_buyer_segmentation.customers_proc_yoy"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "SELECT\nstore,\nperiod,\ncustomer_id,\ndate,\nfirst_order_unix_date,\nfirst_order_channel,\nfirst_order_platform,\nrecency_days,\nfrequency,\nquantity,\nrevenue, \nrevenue_90pct,\nrevenue_10pct,\ncase when first_order_unix_date >= window_start_unix_date then 'New'\n\telse 'Existing' end as newness_segment,\ncase when revenue >= revenue_90pct then 'Top 10%'\n\twhen revenue <= revenue_10pct then 'Bottom 10%'\n\telse 'Middle 80%' end as revenue_segment,\ncase when frequency = 1 then '1'\n\twhen frequency = 2 then '2'\n\twhen frequency > 2 then '3+'\n\telse null end as frequency_segment\nFROM {{ ref('customers_proc') }}", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "math", "buyer-segmentation", "segment_proc_buyers"], "unique_id": "model.shopify_buyer_segmentation.segment_proc_buyers", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "math/buyer-segmentation/segment_proc_buyers.sql", "original_file_path": "models/math/buyer-segmentation/segment_proc_buyers.sql", "name": "segment_proc_buyers", "resource_type": "model", "alias": "segment_proc_buyers", "checksum": {"name": "sha256", "checksum": "780a7256e4e553d7662ee2c727269b4acfee02d17000b7f3807cc46b2cd2f1ba"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["customers_proc"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.shopify_buyer_segmentation.customers_proc"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "WITH ty as (\n\n\tSELECT\n\tstore,\n\t'Rolling YoY' as period,\n\tdate,\n\tcustomer_id,\n\tfirst_order_channel,\n\tfirst_order_platform,\n\trevenue_segment as revenue_segment,\n\tfrequency_segment as frequency_segment,\n\tnewness_segment as newness_segment,\n\trecency_days as recency,\n\tfrequency as frequency,\n\trevenue as revenue,\n\t0 as recency_prev,\n\t0 as frequency_prev,\n\t0 as revenue_prev,\n\t0 as retention_eligible,\n\tcase when newness_segment = 'Existing' then 1 else 0 end as retention_success\t\n\tFROM {{ ref('segment_proc_buyers') }}\n\tWHERE period = 'Rolling Year'\n\n),\n\nthis_month_1yr as (\n\n\tSELECT\n\tstore,\n\t'Rolling YoY' as period,\n\tdate,\n\tcustomer_id,\n\tfirst_order_channel,\n\tfirst_order_platform,\t\n\trevenue_segment,\n\tfrequency_segment,\n\tnewness_segment,\n\t0 as recency,\n\t0 as frequency,\n\t0 as revenue,\n\trecency_days as recency_prev,\n\tfrequency as frequency_prev,\n\trevenue as revenue_prev,\n\t1 as retention_eligible,\n\t0 as retention_success\t\n\tFROM {{ ref('segment_proc_buyers') }}\n\tWHERE period = 'Rolling Previous Year'\n\n),\n\nthis_quarter as (\n\n\tSELECT\n\tstore,\n\t'Rolling QoQ' as period,\t\n\tdate,\n\tcustomer_id,\n\tfirst_order_channel,\n\tfirst_order_platform,\t\n\trevenue_segment,\n\tfrequency_segment,\n\tnewness_segment,\n\trecency_days as recency,\n\tfrequency as frequency,\n\trevenue as revenue,\n\t0 as recency_prev,\n\t0 as frequency_prev,\n\t0 as revenue_prev,\n\t0 as retention_eligible,\n\tcase when newness_segment = 'Existing' then 1 else 0 end as retention_success\t\n\tFROM {{ ref('segment_proc_buyers') }}\n\tWHERE period = 'Rolling Quarter'\n\n),\n\nlast_quarter as (\n\n\tSELECT\n\tstore,\n\t'Rolling QoQ' as period,\n\tdate,\n\tcustomer_id,\n\tfirst_order_channel,\n\tfirst_order_platform,\t\n\trevenue_segment as revenue_segment,\n\tfrequency_segment as frequency_segment,\n\tnewness_segment as newness_segment,\n\t0 as recency,\n\t0 as frequency,\n\t0 as revenue,\n\trecency_days as recency_prev,\n\tfrequency as frequency_prev,\n\trevenue as revenue_prev,\n\t1 as retention_eligible,\n\t0 as retention_success\n\tFROM {{ ref('segment_proc_buyers') }}\n\tWHERE period = 'Rolling Previous Quarter'\n\n)\n\nSELECT\nstore,\nperiod,\ndate, \ncustomer_id,\ncase when sum(revenue) > 0 then 1 else 0 end as buyers,\nfirst_order_channel,\nfirst_order_platform,\t\nrevenue_segment,\nfrequency_segment,\nnewness_segment,\t\nifnull(sum(recency), 0) recency,\nifnull(sum(frequency), 0) frequency,\nifnull(sum(revenue), 0) revenue,\ncase when sum(frequency) > 0 then sum(revenue)/sum(frequency) else 0 end as aov,\nifnull(sum(recency_prev), 0) recency_prev,\nifnull(sum(frequency_prev), 0) frequency_prev,\nifnull(sum(revenue_prev), 0) revenue_prev,\ncase when sum(frequency_prev) > 0 then sum(revenue_prev)/sum(frequency_prev) else 0 end as aov_prev,\nsum(retention_eligible) retention_eligible,\nsum(retention_success) retention_success\nFROM\n(\n\tSELECT * FROM ty\n\tUNION ALL\n\tSELECT * FROM this_month_1yr\n\tUNION ALL\n\tSELECT * FROM this_quarter\n\tUNION ALL\n\tSELECT * FROM last_quarter\n\n)\nGROUP BY store, period, date, customer_id, first_order_channel, first_order_platform,\nrevenue_segment, frequency_segment, newness_segment", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "math", "buyer-segmentation", "segment_stats_buyers_agg"], "unique_id": "model.shopify_buyer_segmentation.segment_stats_buyers_agg", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "math/buyer-segmentation/segment_stats_buyers_agg.sql", "original_file_path": "models/math/buyer-segmentation/segment_stats_buyers_agg.sql", "name": "segment_stats_buyers_agg", "resource_type": "model", "alias": "segment_stats_buyers_agg", "checksum": {"name": "sha256", "checksum": "83606e58e6906c2536a92f4d0d3856b66cdeb2f7814c42ab95118a9fd0acc38d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["segment_proc_buyers"], ["segment_proc_buyers"], ["segment_proc_buyers"], ["segment_proc_buyers"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.shopify_buyer_segmentation.segment_proc_buyers", "model.shopify_buyer_segmentation.segment_proc_buyers", "model.shopify_buyer_segmentation.segment_proc_buyers", "model.shopify_buyer_segmentation.segment_proc_buyers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "SELECT\nstore,\nperiod,\ndate,\n'Overall' as view,\n'Overall' as view_segment,\n'Revenue' as segment_type,\nrevenue_segment as segment,\nsum(buyers) buyers,\ncase when sum(buyers) > 0 then sum(recency)/sum(buyers) else null end as  recency,\nsum(frequency) frequency,\nsum(revenue) revenue,\ncase when sum(frequency) > 0 then sum(revenue)/sum(frequency) else null end as aov,\ncase when sum(buyers) > 0 then sum(recency_prev)/sum(buyers) else null end as  recency_prev,\nsum(frequency_prev) frequency_prev,\nsum(revenue_prev) revenue_prev,\ncase when sum(frequency_prev) > 0 then sum(revenue_prev)/sum(frequency_prev) else null end as aov_prev,\ncase when sum(retention_eligible) > 0 then sum(retention_success)/sum(retention_eligible) else null end as retention_rate\nFROM {{ ref('segment_stats_buyers_agg')}}\nGROUP BY store, period, date, segment, view, view_segment, segment_type\n\nUNION ALL\n\nSELECT\nstore,\nperiod,\ndate,\n'First Order Channel' as view,\nfirst_order_channel as view_segment,\n'Revenue' as segment_type,\nrevenue_segment as segment,\nsum(buyers) buyers,\ncase when sum(buyers) > 0 then sum(recency)/sum(buyers) else null end as  recency,\nsum(frequency) frequency,\nsum(revenue) revenue,\ncase when sum(frequency) > 0 then sum(revenue)/sum(frequency) else null end as aov,\ncase when sum(buyers) > 0 then sum(recency_prev)/sum(buyers) else null end as  recency_prev,\nsum(frequency_prev) frequency_prev,\nsum(revenue_prev) revenue_prev,\ncase when sum(frequency_prev) > 0 then sum(revenue_prev)/sum(frequency_prev) else null end as aov_prev,\ncase when sum(retention_eligible) > 0 then sum(retention_success)/sum(retention_eligible) else null end as retention_rate\nFROM {{ ref('segment_stats_buyers_agg')}}\nGROUP BY store, period, date, segment, view, view_segment, segment_type\n\nUNION ALL\n\nSELECT\nstore,\nperiod,\ndate,\n'First Order Platform' as view,\nfirst_order_platform as view_segment,\n'Revenue' as segment_type,\nrevenue_segment as segment,\nsum(buyers) buyers,\ncase when sum(buyers) > 0 then sum(recency)/sum(buyers) else null end as  recency,\nsum(frequency) frequency,\nsum(revenue) revenue,\ncase when sum(frequency) > 0 then sum(revenue)/sum(frequency) else null end as aov,\ncase when sum(buyers) > 0 then sum(recency_prev)/sum(buyers) else null end as  recency_prev,\nsum(frequency_prev) frequency_prev,\nsum(revenue_prev) revenue_prev,\ncase when sum(frequency_prev) > 0 then sum(revenue_prev)/sum(frequency_prev) else null end as aov_prev,\ncase when sum(retention_eligible) > 0 then sum(retention_success)/sum(retention_eligible) else null end as retention_rate\nFROM {{ ref('segment_stats_buyers_agg')}}\nGROUP BY store, period, date, segment, view, view_segment, segment_type\n\nUNION ALL\n\nSELECT\nstore,\nperiod,\ndate,\n'Overall' as view,\n'Overall' as view_segment,\n'Frequency' as segment_type,\nfrequency_segment as segment,\nsum(buyers) buyers,\ncase when sum(buyers) > 0 then sum(recency)/sum(buyers) else null end as  recency,\nsum(frequency) frequency,\nsum(revenue) revenue,\ncase when sum(frequency) > 0 then sum(revenue)/sum(frequency) else null end as aov,\ncase when sum(buyers) > 0 then sum(recency_prev)/sum(buyers) else null end as  recency_prev,\nsum(frequency_prev) frequency_prev,\nsum(revenue_prev) revenue_prev,\ncase when sum(frequency_prev) > 0 then sum(revenue_prev)/sum(frequency_prev) else null end as aov_prev,\ncase when sum(retention_eligible) > 0 then sum(retention_success)/sum(retention_eligible) else null end as retention_rate\nFROM {{ ref('segment_stats_buyers_agg')}}\nGROUP BY store, period, date, segment, view, view_segment, segment_type\n\nUNION ALL\n\nSELECT\nstore,\nperiod,\ndate,\n'First Order Channel' as view,\nfirst_order_channel as view_segment,\n'Frequency' as segment_type,\nfrequency_segment as segment,\nsum(buyers) buyers,\ncase when sum(buyers) > 0 then sum(recency)/sum(buyers) else null end as  recency,\nsum(frequency) frequency,\nsum(revenue) revenue,\ncase when sum(frequency) > 0 then sum(revenue)/sum(frequency) else null end as aov,\ncase when sum(buyers) > 0 then sum(recency_prev)/sum(buyers) else null end as  recency_prev,\nsum(frequency_prev) frequency_prev,\nsum(revenue_prev) revenue_prev,\ncase when sum(frequency_prev) > 0 then sum(revenue_prev)/sum(frequency_prev) else null end as aov_prev,\ncase when sum(retention_eligible) > 0 then sum(retention_success)/sum(retention_eligible) else null end as retention_rate\nFROM {{ ref('segment_stats_buyers_agg')}}\nGROUP BY store, period, date, segment, view, view_segment, segment_type\n\nUNION ALL\n\nSELECT\nstore,\nperiod,\ndate,\n'First Order Platform' as view,\nfirst_order_platform as view_segment,\n'Frequency' as segment_type,\nfrequency_segment as segment,\nsum(buyers) buyers,\ncase when sum(buyers) > 0 then sum(recency)/sum(buyers) else null end as  recency,\nsum(frequency) frequency,\nsum(revenue) revenue,\ncase when sum(frequency) > 0 then sum(revenue)/sum(frequency) else null end as aov,\ncase when sum(buyers) > 0 then sum(recency_prev)/sum(buyers) else null end as  recency_prev,\nsum(frequency_prev) frequency_prev,\nsum(revenue_prev) revenue_prev,\ncase when sum(frequency_prev) > 0 then sum(revenue_prev)/sum(frequency_prev) else null end as aov_prev,\ncase when sum(retention_eligible) > 0 then sum(retention_success)/sum(retention_eligible) else null end as retention_rate\nFROM {{ ref('segment_stats_buyers_agg')}}\nGROUP BY store, period, date, segment, view, view_segment, segment_type\n\nUNION ALL\n\nSELECT\nstore,\nperiod,\ndate,\n'Overall' as view,\n'Overall' as view_segment,\n'Total' as segment_type,\n'Total' as segment,\nsum(buyers) buyers,\ncase when sum(buyers) > 0 then sum(recency)/sum(buyers) else null end as  recency,\nsum(frequency) frequency,\nsum(revenue) revenue,\ncase when sum(frequency) > 0 then sum(revenue)/sum(frequency) else null end as aov,\ncase when sum(buyers) > 0 then sum(recency_prev)/sum(buyers) else null end as  recency_prev,\nsum(frequency_prev) frequency_prev,\nsum(revenue_prev) revenue_prev,\ncase when sum(frequency_prev) > 0 then sum(revenue_prev)/sum(frequency_prev) else null end as aov_prev,\ncase when sum(retention_eligible) > 0 then sum(retention_success)/sum(retention_eligible) else null end as retention_rate\nFROM {{ ref('segment_stats_buyers_agg')}}\nGROUP BY store, period, date, segment, view, view_segment, segment_type\n\nUNION ALL\n\nSELECT\nstore,\nperiod,\ndate,\n'First Order Channel' as view,\nfirst_order_channel as view_segment,\n'Total' as segment_type,\n'Total' as segment,\nsum(buyers) buyers,\ncase when sum(buyers) > 0 then sum(recency)/sum(buyers) else null end as  recency,\nsum(frequency) frequency,\nsum(revenue) revenue,\ncase when sum(frequency) > 0 then sum(revenue)/sum(frequency) else null end as aov,\ncase when sum(buyers) > 0 then sum(recency_prev)/sum(buyers) else null end as  recency_prev,\nsum(frequency_prev) frequency_prev,\nsum(revenue_prev) revenue_prev,\ncase when sum(frequency_prev) > 0 then sum(revenue_prev)/sum(frequency_prev) else null end as aov_prev,\ncase when sum(retention_eligible) > 0 then sum(retention_success)/sum(retention_eligible) else null end as retention_rate\nFROM {{ ref('segment_stats_buyers_agg')}}\nGROUP BY store, period, date, segment, view, view_segment, segment_type\n\nUNION ALL\n\nSELECT\nstore,\nperiod,\ndate,\n'First Order Platform' as view,\nfirst_order_platform as view_segment,\n'Total' as segment_type,\n'Total' as segment,\nsum(buyers) buyers,\ncase when sum(buyers) > 0 then sum(recency)/sum(buyers) else null end as  recency,\nsum(frequency) frequency,\nsum(revenue) revenue,\ncase when sum(frequency) > 0 then sum(revenue)/sum(frequency) else null end as aov,\ncase when sum(buyers) > 0 then sum(recency_prev)/sum(buyers) else null end as  recency_prev,\nsum(frequency_prev) frequency_prev,\nsum(revenue_prev) revenue_prev,\ncase when sum(frequency_prev) > 0 then sum(revenue_prev)/sum(frequency_prev) else null end as aov_prev,\ncase when sum(retention_eligible) > 0 then sum(retention_success)/sum(retention_eligible) else null end as retention_rate\nFROM {{ ref('segment_stats_buyers_agg')}}\nGROUP BY store, period, date, segment, view, view_segment, segment_type", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "math", "buyer-segmentation", "segment_stats_buyers_view"], "unique_id": "model.shopify_buyer_segmentation.segment_stats_buyers_view", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "math/buyer-segmentation/segment_stats_buyers_view.sql", "original_file_path": "models/math/buyer-segmentation/segment_stats_buyers_view.sql", "name": "segment_stats_buyers_view", "resource_type": "model", "alias": "segment_stats_buyers_view", "checksum": {"name": "sha256", "checksum": "836e49dbbadddb767ef6931fb1adb715771d3fe260119c05093a26dd5ae46899"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["segment_stats_buyers_agg"], ["segment_stats_buyers_agg"], ["segment_stats_buyers_agg"], ["segment_stats_buyers_agg"], ["segment_stats_buyers_agg"], ["segment_stats_buyers_agg"], ["segment_stats_buyers_agg"], ["segment_stats_buyers_agg"], ["segment_stats_buyers_agg"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.shopify_buyer_segmentation.segment_stats_buyers_agg", "model.shopify_buyer_segmentation.segment_stats_buyers_agg", "model.shopify_buyer_segmentation.segment_stats_buyers_agg", "model.shopify_buyer_segmentation.segment_stats_buyers_agg", "model.shopify_buyer_segmentation.segment_stats_buyers_agg", "model.shopify_buyer_segmentation.segment_stats_buyers_agg", "model.shopify_buyer_segmentation.segment_stats_buyers_agg", "model.shopify_buyer_segmentation.segment_stats_buyers_agg", "model.shopify_buyer_segmentation.segment_stats_buyers_agg"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with buyer_lists as (\n\n\tSELECT\n\ta.store,\n\tperiod,\n\tdate,\n\tcustomer_id,\n\tb.first_name,\n\tb.last_name,\n\tb.email,\n\trecency,\n\tfrequency,\n\trevenue,\n\taov,\n\trevenue_segment,\n\tfrequency_segment\n\tFROM {{ ref('segment_stats_buyers_agg')}} a\n\tLEFT JOIN {{ ref('agg_customers') }} b\n\tON (\n\t\ta.store = b.store AND\n\t\ta.customer_id = b.id\n\t)\n\twhere revenue > 0\n)\n\nSELECT\nstore,\nperiod,\ndate,\n'Revenue' as segment_type,\nrevenue_segment as segment,\ncustomer_id,\nfirst_name,\nlast_name,\nemail,\nrecency,\nfrequency,\nrevenue,\naov\nFROM buyer_lists\n\nUNION ALL\n\nSELECT\nstore,\nperiod,\ndate,\n'Frequency' as segment_type,\nfrequency_segment as segment,\ncustomer_id,\nfirst_name,\nlast_name,\nemail,\nrecency,\nfrequency,\nrevenue,\naov\nFROM buyer_lists", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "math", "buyer-segmentation", "buyer_segment_lists"], "unique_id": "model.shopify_buyer_segmentation.buyer_segment_lists", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "math/buyer-segmentation/buyer_segment_lists.sql", "original_file_path": "models/math/buyer-segmentation/buyer_segment_lists.sql", "name": "buyer_segment_lists", "resource_type": "model", "alias": "buyer_segment_lists", "checksum": {"name": "sha256", "checksum": "35ba46c8806b838d0970fd0c82eebaa8ba46cdd892a20ec68a465554effa159f"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["segment_stats_buyers_agg"], ["agg_customers"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.shopify_buyer_segmentation.segment_stats_buyers_agg", "model.shopify_buyer_segmentation.agg_customers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "SELECT\nstore,\nperiod,\ndate,\nview,\nview_segment,\nsegment_type,\nsegment,\nbuyers,\ntotal_view_buyers,\ncase when ( total_segment_buyers / total_buyers ) > 0 \n\tthen ( buyers / total_view_buyers ) / ( total_segment_buyers / total_buyers ) \n\telse null end as segment_buyer_index,\nrecency,\norders,\ncase when buyers > 0 then orders / buyers else null end as frequency,\nrevenue,\ncase when total_revenue > 0 then revenue / total_revenue else null end as pct_of_revenue,\nrevenue_prev,\ntotal_view_revenue,\ncase when ( total_segment_revenue / total_revenue ) > 0 \n\tthen ( revenue / total_view_revenue ) / ( total_segment_revenue / total_revenue ) \n\telse null end as segment_revenue_index,\naov,\nrecency_growth,\nfrequency_growth,\nrevenue_growth,\naov_growth,\nretention_rate\nFROM (\n\n\tSELECT\n\tstore,\n\tperiod,\n\tdate,\n\tview,\n\tview_segment,\n\tsegment_type,\n\tsegment,\n\tbuyers,\n\tsum(buyers) over w1 as total_view_buyers,\n\tsum(buyers) over w2 as total_segment_buyers,\n\tsum(buyers) over w3 as total_buyers,\n\trecency,\n\tfrequency orders,\n\trevenue,\n\tsum(revenue) over w1 as total_view_revenue,\n\tsum(revenue) over w2 as total_segment_revenue,\n\tsum(revenue) over w3 as total_revenue,\n\taov,\n\tcase when recency_prev > 0 then ( recency_prev - recency ) / recency_prev else null end as recency_growth,\n\tcase when frequency_prev > 0 then ( frequency - frequency_prev ) / frequency_prev else null end as frequency_growth,\n\trevenue_prev,\n\tcase when revenue_prev > 0 then ( revenue - revenue_prev ) / revenue_prev else null end as revenue_growth,\n\tcase when aov_prev > 0 then ( aov - aov_prev ) / aov_prev else null end as aov_growth,\n\tretention_rate\n\tFROM {{ ref('segment_stats_buyers_view')}}\n\tWINDOW w1 as (PARTITION BY store, period, date, segment_type, view, view_segment),\n\tw2 as (PARTITION BY store, period, date, segment_type, view, segment),\n\tw3 as (PARTITION BY store, period, date, segment_type, view)\n)", "database": "dbt-projects", "schema": "dbt_buyer_segmentation", "fqn": ["shopify_buyer_segmentation", "math", "buyer-segmentation", "buyer_segment_stats"], "unique_id": "model.shopify_buyer_segmentation.buyer_segment_stats", "package_name": "shopify_buyer_segmentation", "root_path": "/usr/src/develop/user-10323/environment-13758/repository-11236", "path": "math/buyer-segmentation/buyer_segment_stats.sql", "original_file_path": "models/math/buyer-segmentation/buyer_segment_stats.sql", "name": "buyer_segment_stats", "resource_type": "model", "alias": "buyer_segment_stats", "checksum": {"name": "sha256", "checksum": "ed400395d87863430f1b19a7735cb0047fc804b9ee44563a868ea0d9124becbf"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["segment_stats_buyers_view"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.shopify_buyer_segmentation.segment_stats_buyers_view"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}], "generated_at": "2020-11-10T09:24:15.292898Z", "elapsed_time": 6.760889053344727}